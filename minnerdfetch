#!/bin/sh

## OS/ENVIRONMENT INFO DETECTION

ostype="$(uname)"

linuxtype=none
if command -v getprop > /dev/null; then
	linuxtype=android	
fi
kernel="$(echo $(uname -r) | cut -d'-'  -f1-1)"
case $ostype in
	"Linux"*)
		if [ $linuxtype = android ]; then
			host="$(hostname)"
			android_version="$(getprop ro.build.version.release)"
			case $android_version in
				1.5.*) codename="Cupcake" ;;
				1.6.*) codename="Donut" ;;
				2.0.* | 2.1.*) codename="Eclair" ;;
				2.2.*) codename="Froyo" ;;
				2.3.*) codename="Gingerbread" ;;
				3.*) codename="Honeycomb" ;;
				4.*) codename="Ice Cream Sandwich" ;;
				4.1.* | 4.2.* | 4.3.*) codename="Jellybean" ;;
				4.4.*) codename="KitKat" ;;
				5.*) codename="Lolipop" ;;
				6.*) codename="Marshmallow" ;;
				7.*) codename="Nougat" ;;
				8.*) codename="Oreo"  ;;
				9.*) codename="Pie"  ;;
				*) ""
			esac
			USER=${USER:-$(id -un || printf %s "${HOME/*\/}")}
			os="Android ${android_version} ${codename}"
		else
			host="$(cat /proc/sys/kernel/hostname)"
			. /etc/os-release
			if [ -f /bedrock/etc/bedrock-release ]; then
				os="$(brl version)"
			else
				os="${PRETTY_NAME}"
			fi
		fi
		shell=${SHELL##*/};;
	"Darwin"*)
		host="$(hostname -f | sed -e 's/^[^.]*\.//')"
		while IFS='<>' read -r _ _ line _; do
			case $line in
				ProductVersion)
					IFS='<>' read -r _ _ mac_version _
					break;;
			esac
		done < /System/Library/CoreServices/SystemVersion.plist
		case $mac_version in
                10.4*)  codename="Mac OS X Tiger" ;;
                10.5*)  codename="Mac OS X Leopard" ;;
                10.6*)  codename="Mac OS X Snow Leopard" ;;
                10.7*)  codename="Mac OS X Lion" ;;
                10.8*)  codename="OS X Mountain Lion" ;;
                10.9*)  codename="OS X Mavericks" ;;
                10.10*) codename="OS X Yosemite" ;;
                10.11*) codename="OS X El Capitan" ;;
                10.12*) codename="macOS Sierra" ;;
                10.13*) codename="macOS High Sierra" ;;
                10.14*) codename="macOS Mojave" ;;
                10.15*) codename="macOS Catalina" ;;
                10.16*) codename="macOS Big Sur" ;;
                11.*)  codename="macOS Big Sur" ;;
                12.*)  codename="macOS Monterey" ;;
                13.*)  codename="macOS Ventura" ;;
                *)      codename=macOS ;;
		esac
		os="ï…¹ ${codename} ${mac_version}";;
	*)
		os="Idk"
		host="host"
esac

#icons for specific os, need expansion
if [ $host = debian ]; then
	icon="ïŒ† "
elif [ $host = alpine ]; then
	icon="ïŒ€ "
elif [ $host = arch ]; then
	icon="ïŒƒ "
elif [ $host = manjaro ]; then
	icon="ïŒ’ "
elif [ $host = android ]; then
	icon="îœŽ "
else
	icon=""
fi

## DE DETECTION
de_type=

## PACKAGE MANAGER AND PACKAGES DETECTION

manager=$(which nix-env pkg yum zypper dnf rpm apt brew port pacman xbps-query emerge cave apk kiss pmm /usr/sbin/slackpkg bulge yay paru pacstall cpm pmm eopkg wmctrl 2>/dev/null)
manager=${manager##*/}
case $manager in
	cpm) packages="$(cpm C)";;
	brew) packages="$(printf '%s\n' "$(brew --cellar)/"* | wc -l | tr -d '[:space:]')";;
	port) packages="$(port installed | wc -l)";;
	apt) packages="$(dpkg-query -f '${binary:Package}\n' -W | wc -l)";;
	rpm) packages="$(rpm -qa --last| wc -l)";;
	yum) packages="$(yum list installed | wc -l)";;
	dnf) packages="$(dnf list installed | wc -l)";;
	zypper) packages="$(zypper se | wc -l)";;
	pacman) packages="$(pacman -Q | wc -l)";;
	yay) packages="$(yay -Q | wc -l)";;
	paru) packages="$(paru -Q | wc -l)";;
	pacstall) packages="$(pacstall -L | wc -l)";;
	kiss) packages="$(kiss list | wc -l)";;
	emerge) packages="$(qlist -I | wc -l)";;
	pkg) packages="$(pkg info | wc -l | tr -d ' ')";;
	cave) packages="$(cave show installed-slots | wc -l)";;
	xbps-query) packages="$(xbps-query -l | wc -l)";;
	nix-env) packages="$(nix-store -q --requisites /run/current-system/sw | wc -l)";;
	apk) packages="$(apk list --installed | wc -l)";;
	pmm) packages="$(/bedrock/libexec/pmm pacman pmm -Q 2>/dev/null | wc -l )";;
	eopkg) packages="$(eopkg li | wc -l)";;
	/usr/sbin/slackpkg) packages="$(ls /var/log/packages | wc -l)";;
	bulge) packages="$(bulge list | wc -l)";;
	*)
		packages="$(ls /usr/bin | wc -l)"
		manager="bin";;
esac

## UPTIME DETECTION

if [ $linuxtype = android ]; then
    uptime="$(echo $(uptime -p) | cut -c 4-)"
else
    case $ostype in
        "Linux")
            IFS=. read -r s _ < /proc/uptime;;
        *) 
            s=$(sysctl -n kern.boottime)
            s=${s#*=}
            s=${s%,*}
            s=$(($(date +%s) - s));;
    esac
    d="$((s / 60 / 60 / 24))"
    h="$((s / 60 / 60 % 24))"
    m="$((s / 60 % 60))"
    # Plurals
    [ "$d" -gt 1 ] && dp=s
    [ "$h" -gt 1 ] && hp=s
    [ "$m" -gt 1 ] && mp=s
    [ "$s" -gt 1 ] && sp=s
    # Hide empty fields.
    [ "$d" = 0 ] && d=
    [ "$h" = 0 ] && h=
    [ "$m" = 0 ] && m=
    [ "$m" != "" ] && s=
    # Make the output of uptime smaller.
    [ "$d" ] && uptime="$d day$dp, "
    [ "$h" ] && uptime="$uptime$h hour$hp, "
    [ "$m" ] && uptime="$uptime$m min$mp"
    [ "$s" ] && uptime="$uptime$s sec$sp"
    uptime=${uptime%, }
fi

## RAM DETECTION

case $ostype in
	"Linux")
		while IFS=':k '  read -r key val _; do
			case $key in
				MemTotal)
					mem_used=$((mem_used + val))
					mem_full=$val;;
				Shmem) mem_used=$((mem_used + val));;
				MemFree|Buffers|Cached|SReclaimable) mem_used=$((mem_used - val));;
			esac
		done < /proc/meminfo
		mem_used=$((mem_used / 1024)) 
		mem_full=$((mem_full / 1024));;
	"Darwin"*)
		mem_full=$(($(sysctl -n hw.memsize) / 1024 / 1024))
		while IFS=:. read -r key val; do
			case $key in
				*' wired'*|*' active'*|*' occupied'*)
					mem_used=$((mem_used + ${val:-0}));;
			esac
			done <<-EOF
				$(vm_stat)
						EOF

			mem_used=$((mem_used * 4 / 1024));;
	*)
		mem_full="idk"
		mem_used="idk"
esac
memstat="${mem_used}/${mem_full} MB"
if which expr > /dev/null 2>&1; then
	mempercent="($(expr $(expr ${mem_used} \* 100 / ${mem_full} ))%)"
fi
## DEFINE COLORS

bold='[1m'
black='[30m'
red='[31m'
green='[32m'
yellow='[33m'
blue='[34m'
magenta='[35m'
cyan='[36m'
white='[37m'
grey='[90m'
reset='[0m'

## USER VARIABLES -- YOU CAN CHANGE THESE

lc="${reset}${bold}${magenta}"  # labels
nc="${reset}${bold}${yellow}"   # user
hn="${reset}${bold}${blue}"     # hostname
ic="${reset}${green}"           # info
c0="${reset}${grey}"            # first color
c1="${reset}${white}"           # second color
c2="${reset}${yellow}"          # third color

## OUTPUT



cat <<EOF

${nc}${USER}${red}@${reset}${hn}${host}${reset}
${lc}ï…¼  ${ic}${icon}${os}${reset}
${lc}îˆº  ${ic}${kernel}${reset}
${lc}ï¡š  ${ic}${RAM}${memstat} ${mempercent}
${lc}ï£“  ${ic}${packages} (${manager})${reset}
${lc}ï™µ  ${ic}${uptime}${reset}
${lc}îˆ«  ${red}â–ˆâ–ˆâ–ˆ${green}â–ˆâ–ˆâ–ˆ${yellow}â–ˆâ–ˆâ–ˆ${blue}â–ˆâ–ˆâ–ˆ${magenta}â–ˆâ–ˆâ–ˆ${cyan}â–ˆâ–ˆâ–ˆ${reset}
EOF
